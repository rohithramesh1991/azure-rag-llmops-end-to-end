name: CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write       # <-- needed for azure/login (OIDC)
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
      - name: Run tests
        run: pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image
        run: docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .
      - name: Push image
        run: docker push ghcr.io/${{ github.repository }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, prod]
    environment: ${{ matrix.env }}  # approvals, env-scoped secrets
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}   # env-scoped secret
          cluster-name:  ${{ secrets.AKS_CLUSTER_NAME }}      # env-scoped secret

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Install kustomize
        run: |
          curl -sL https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh | bash
          sudo mv kustomize /usr/local/bin/

      - name: Create namespace & app secret
        run: |
          kubectl create namespace rag-${{ matrix.env }} --dry-run=client -o yaml | kubectl apply -f -

          # Create/Update the app-config secret (matches your Deployment envFrom)
          kubectl create secret generic app-config \
            --from-literal=OPENAI_API_TYPE='azure' \
            --from-literal=OPENAI_API_BASE='${{ secrets.OPENAI_API_BASE }}' \
            --from-literal=OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            --from-literal=OPENAI_API_VERSION='${{ secrets.OPENAI_API_VERSION }}' \
            --from-literal=SEARCH_SERVICE_NAME='${{ secrets.SEARCH_SERVICE_NAME }}' \
            --from-literal=SEARCH_API_KEY='${{ secrets.SEARCH_API_KEY }}' \
            --from-literal=SEARCH_INDEX_NAME='${{ secrets.SEARCH_INDEX_NAME }}' \
            --from-literal=EMBEDDING_DEPLOYMENT='${{ secrets.EMBEDDING_DEPLOYMENT }}' \
            --from-literal=CHAT_DEPLOYMENT='${{ secrets.CHAT_DEPLOYMENT }}' \
            -n rag-${{ matrix.env }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Set image tag in overlay and deploy
        working-directory: k8s/overlays/${{ matrix.env }}
        run: |
          # Ensure your kustomization.yaml has an 'images:' entry whose 'name' matches this left-hand value
          kustomize edit set image ghcr.io/${{ github.repository }}=ghcr.io/${{ github.repository }}:${{ github.sha }}
          kubectl apply -k .
